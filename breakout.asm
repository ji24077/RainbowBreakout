################ CSC258H1F winter 2023 Assembly Final Project ##################
# This file contains our implementation of Breakout.
#
# Student 1: ji sung Han(1006581815)
# Student 2: :(
######################## Bitmap Display Configuration ########################
# - Unit width in pixels:       8
# - Unit height in pixels:      8
# - Display width in pixels:    256
# - Display height in pixels:   512
# - Base Address for Display:   0x10008000 ($gp)
##############################################################################
.eqv Base_address 0x10008000 #same as ADDR_DSPL
.eqv Init_paddle_offset 8116 #start
.eqv Init_ball_offset 7872 #ball start

.eqv Paddle_leftmost 0x10009f84 # ADDR_DSPL + 8068 #maximum bound that paddle can go left
.eqv Paddle_rightmost 0x10009fe4 # ADDR_DSPL + 8164 #similary right bound that paddle can go right

.eqv WallandPaddle_colour 0xFFB6C1 #light_pink st: WallandPaddle_clour
.eqv Num_units 4096
        .data
    
    	Start_page:             .word 
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ed1c24, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00709ad1, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00a8e61d, 0x00a8e61d, 0x00a8e61d, 0x00a8e61d, 0x00000000, 0x00000000, 0x00fff200, 0x00fff200, 0x00fff200, 0x00fff200, 0x00000000, 0x00000000, 0x00ffa3b1, 0x00000000, 0x00000000, 0x00ffa3b1, 0x00ffa3b1, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ed1c24, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00709ad1, 0x00709ad1, 0x00709ad1, 0x00000000, 0x00000000, 0x00a8e61d, 0x00000000, 0x00000000, 0x00a8e61d, 0x00000000, 0x00000000, 0x00fff200, 0x00000000, 0x00000000, 0x00fff200, 0x00000000, 0x00000000, 0x00ffa3b1, 0x00ffa3b1, 0x00ffa3b1, 0x00ffa3b1, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ed1c24, 0x00ed1c24, 0x00ed1c24, 0x00ed1c24, 0x00000000, 0x00709ad1, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00a8e61d, 0x00a8e61d, 0x00a8e61d, 0x00a8e61d, 0x00000000, 0x00000000, 0x00fff200, 0x00fff200, 0x00fff200, 0x00fff200, 0x00000000, 0x00000000, 0x00ffa3b1, 0x00ffa3b1, 0x00ffa3b1, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ed1c24, 0x00000000, 0x00000000, 0x00ed1c24, 0x00000000, 0x00709ad1, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00a8e61d, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00fff200, 0x00000000, 0x00000000, 0x00fff200, 0x00000000, 0x00000000, 0x00ffa3b1, 0x00000000, 0x00ffa3b1, 0x00ffa3b1, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ed1c24, 0x00000000, 0x00000000, 0x00ed1c24, 0x00000000, 0x00709ad1, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00a8e61d, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00fff200, 0x00000000, 0x00000000, 0x00fff200, 0x00000000, 0x00000000, 0x00ffa3b1, 0x00000000, 0x00000000, 0x00ffa3b1, 0x00ffa3b1, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ed1c24, 0x00ed1c24, 0x00ed1c24, 0x00ed1c24, 0x00000000, 0x00709ad1, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00a8e61d, 0x00a8e61d, 0x00a8e61d, 0x00a8e61d, 0x00000000, 0x00000000, 0x00fff200, 0x00000000, 0x00000000, 0x00fff200, 0x00000000, 0x00000000, 0x00ffa3b1, 0x00000000, 0x00000000, 0x00000000, 0x00ffa3b1, 0x00ffa3b1, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x006f3198, 0x006f3198, 0x006f3198, 0x00000000, 0x00000000, 0x006f3198, 0x00000000, 0x00000000, 0x006f3198, 0x00000000, 0x00000000, 0x006f3198, 0x006f3198, 0x006f3198, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x006f3198, 0x00000000, 0x006f3198, 0x00000000, 0x00000000, 0x006f3198, 0x00000000, 0x00000000, 0x006f3198, 0x00000000, 0x00000000, 0x00000000, 0x006f3198, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x006f3198, 0x006f3198, 0x006f3198, 0x00000000, 0x00000000, 0x006f3198, 0x006f3198, 0x006f3198, 0x006f3198, 0x00000000, 0x00000000, 0x00000000, 0x006f3198, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
	End_page:		.word
	
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ed1c24, 0x00ed1c24, 0x00ed1c24, 0x00ed1c24, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00fff200, 0x00fff200, 0x00fff200, 0x00fff200, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ed1c24, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0022b14c, 0x0022b14c, 0x0022b14c, 0x00000000, 0x00000000, 0x00000000, 0x0000b7ef, 0x0000b7ef, 0x0000b7ef, 0x0000b7ef, 0x0000b7ef, 0x0000b7ef, 0x0000b7ef, 0x00000000, 0x00000000, 0x00fff200, 0x00000000, 0x00000000, 0x00fff200, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ed1c24, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0022b14c, 0x00000000, 0x0022b14c, 0x00000000, 0x00000000, 0x00000000, 0x0000b7ef, 0x00000000, 0x00000000, 0x0000b7ef, 0x00000000, 0x00000000, 0x0000b7ef, 0x00000000, 0x00000000, 0x00fff200, 0x00fff200, 0x00fff200, 0x00fff200, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ed1c24, 0x00000000, 0x00ed1c24, 0x00ed1c24, 0x00000000, 0x0022b14c, 0x0022b14c, 0x0022b14c, 0x00000000, 0x00000000, 0x00000000, 0x0000b7ef, 0x00000000, 0x00000000, 0x0000b7ef, 0x00000000, 0x00000000, 0x0000b7ef, 0x00000000, 0x00000000, 0x00fff200, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ed1c24, 0x00000000, 0x00000000, 0x00ed1c24, 0x00000000, 0x00000000, 0x00000000, 0x0022b14c, 0x0022b14c, 0x00000000, 0x00000000, 0x0000b7ef, 0x00000000, 0x00000000, 0x0000b7ef, 0x00000000, 0x00000000, 0x0000b7ef, 0x00000000, 0x00000000, 0x00fff200, 0x00fff200, 0x00fff200, 0x00fff200, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ed1c24, 0x00ed1c24, 0x00ed1c24, 0x00ed1c24, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffa3b1, 0x00ffa3b1, 0x00ffa3b1, 0x00ffa3b1, 0x00ffa3b1, 0x00000000, 0x00000000, 0x00ffa3b1, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffa3b1, 0x00ffa3b1, 0x00ffa3b1, 0x00ffa3b1, 0x00000000, 0x00ffa3b1, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffa3b1, 0x00000000, 0x00000000, 0x00ffa3b1, 0x00000000, 0x00000000, 0x00000000, 0x00ffa3b1, 0x00000000, 0x00000000, 0x00ffa3b1, 0x00ffa3b1, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffa3b1, 0x00000000, 0x00000000, 0x00ffa3b1, 0x00000000, 0x00ffa3b1, 0x00ffa3b1, 0x00000000, 0x00000000, 0x00ffa3b1, 0x00ffa3b1, 0x00000000, 0x00000000, 0x00ffa3b1, 0x00ffa3b1, 0x00ffa3b1, 0x00ffa3b1, 0x00ffa3b1, 0x00000000, 0x00000000, 0x00ffa3b1, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffa3b1, 0x00ffa3b1, 0x00ffa3b1, 0x00ffa3b1, 0x00000000, 0x00000000, 0x00ffa3b1, 0x00ffa3b1, 0x00ffa3b1, 0x00ffa3b1, 0x00000000, 0x00000000, 0x00000000, 0x00ffa3b1, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffa3b1, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffa3b1, 0x00ffa3b1, 0x00ffa3b1, 0x00ffa3b1, 0x00ffa3b1, 0x00000000, 0x00000000, 0x00ffa3b1, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ed1c24, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ed1c24, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x0000b7ef, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ed1c24, 0x00ed1c24, 0x00ed1c24, 0x00ed1c24, 0x00ed1c24, 0x00ed1c24, 0x00ed1c24, 0x00ed1c24, 0x00ed1c24, 0x00ed1c24, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00ffffff, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00ffffff, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 
	

##############################################################################

# Immutable Data
##############################################################################
# The address of the bitmap display. Don't forget to connect it!
ADDR_DSPL:
    .word 0x10008000
# The address of the keyboard. Don't forget to connect it!
ADDR_KBRD:
    .word 0xffff0000

COLOURS:
	.word   0xFFB6C1 #light pink 0(colour)
	.word	0xff0000    # red 4()
	.word	0x0000ff  # blue 8() use ligher blue, 
	.word	0x00ff00   # green 12()
	.word	0xffff00    # yellow 16() yellow looks better
	.word	0xADFF2F    # Greenyellow for paddle 24() i switched, dont use greenyellow
	.word 	0xA52A2A    #brown, for ball 24()
	.word   0x000000    # black 28()
	
	
	
##############################################################################
# Mutable Data
##############################################################################

Paddle_location:
	.word 0x10009fB4 # ADDR_DSPL + Initial_paddle_offset address
	
Ball_location:
	.word 0x10009EC0 # ADDR_DSPL + 7872(to hex)

Ball_velocity:
	.word 0x00000001 # x velocity =1 could be mutable
	.word 0x00000001 # y velocity

##############################################################################
# Code
##############################################################################
	.text
	.globl main

	# Run the Brick Breaker game.

main:	
Draw_start:  #draw start screen breakout

	    li $t0, Base_address       # $t0 has base address
            la $t1, Start_page        # $t1 has Start_page[]
            li $t2, 0            # $t2 as index
            li $t3, Num_units        # $t3 stores total units whihch is 4096

Loop_start: 
	    bge $t2, $t3, Exit_start #if finihsed draw Start_page, then wait for enter
            sll $t4, $t2, 2          # calculate offsetst: times 2, since  2^2,...4 
            add $t5, $t1, $t4        # $t5 stores address of color for current unit
            lw $t5, 0($t5)            # $t5 stores color of current unit
            add $t4, $t4, $t0        # $t4 stores address of current unit
            sw $t5, 0($t4)            # paint the given unit to black
            addi $t2, $t2, 1        # index
            j Loop_start

Exit_start:

Wait_for_enter:


    lw $t8,ADDR_KBRD
    lw $t7, 0($t8) #get the data of keyboard
    beq $t7,1,Wait_enter_loop #t7=1, then branchto enter_loop

Wait_enter_loop:

	lw $t7,4($t8)
	li $t6, 0x0A # let t46 is enter
	beq $t7,$t6,Enter_pressed
	j Wait_enter_loop
Enter_pressed:
#if Enter pressed, starts to draw game_map
#but, before, we clear the screen and draw a game map
Clear_screen:
    li $t0, Base_address    # $t0 stores base address
    li $t1, 0x000000        # $t1 stores the color black (0x000000)
    li $t2, 0               # $t2 stores counter
    li $t3, Num_units      # $t3 stores total units

Clear_screen_loop:
    bge $t2, $t3, Exit_clear_screen # If counter >= total units, exit the loop
    sw $t1, 0($t0)          # Paint the current unit black
    addi $t0, $t0, 4        # Increment the base address
    addi $t2, $t2, 1        # Increment counter
    j Clear_screen_loop     # Repeat the loop

Exit_clear_screen:             # Return from the function
    

Draw_game:
    # Initialize the game
    la $t0,COLOURS          # temp = COLOURS load the address
    lw $t0, 0($t0)              # colour = t[0] load word

    #need to address where to display we write
    la $t1, ADDR_DSPL           # temp = &ADDR_DSPL
    lw $t1, 0($t1)              # display = *temp since t1 is address of display, we load_word to t1 

    li $t2, 32               # since there are 8 unit pixels, 8*32=256, we loops until 32 times

    # Now let's iterate 32 times, drawing each unit in the line
    li $t3, 0                   # we use t3 as index of function
    

Draw_line_top: #draw top line w light pink
    slt $t4, $t3, $t2           # t3(i)<unit_32  t4=1 ift3<t2 o/w t4=0
    beq $t4, $0, End_draw_line  # if t4=0, then branch it to End_draw_line

         sw $t0, 0($t1)          # Recall t1 has address of dipslay, and then t0 has address of colours, which means we laod colour to address of display where t1+0
        addi $t1, $t1, 4        #since t1 has disp_Add, we place it t1 by 4,(which is right after 1 pixel (1unit=4)

    addi $t3, $t3, 1            # t3(i)++
    b Draw_line_top #loops untill condition satisfied

End_draw_line:
    nop #no operatoin, gives you the delay of one cycle
    #nowm intialize, t2,t3,t1 for next function
   #t2 is end of line
   #t3 is index
   #t1 has disp_Add
    li $t2 128
    li $t3 0
    la $t1, ADDR_DSPL           # temp = &ADDR_DSPL
    lw $t1, 0($t1)  
    
Draw_vertically_right:
    slt $t4, $t3, $t2           # for loops untill t3<t2(128) t4=1, o/w t4=0
    beq $t4, $0, End_Draw_vertically_right # else logic

        sw $t0, 0($t1)          # Paint it ,recall t0 has colour add,t1 disp_add
        addi $t1, $t1, 128        # every end of row, R_32,R_64. --

    addi $t3, $t3, 1            # t3(i)++
    b Draw_vertically_right


End_Draw_vertically_right:
    nop
    #intialize again

    li $t2 128
    li $t3 0
    la $t1, ADDR_DSPL           
    lw $t1, 0($t1)  
    addi $t1 $t1 124 #recall, starts at right before

Draw_vertically_left: #every right_before
    slt $t4, $t3, $t2           # same lgic
    beq $t4, $0, End_Draw_vertically_left 

        sw $t0, 0($t1)          # 
        addi $t1, $t1, 128        # 124+128=252 every right before 

    addi $t3, $t3, 1            # inc index
    b Draw_vertically_left

End_Draw_vertically_left:
    nop
    #now we draw bricks
    li $t2 30 #since vertically twice, 128-8=120 every 4 unit is 30 we loops 30 times
    li $t3 0 #index
    la $t1, ADDR_DSPL           # t1 = &ADDR_DSPL
    lw $t1, 0($t1)   #dont forget
    addi $t1 $t1 132 #we start it at 132, since we  draw verticall line by 4, 128+4=132

    la $t0, COLOURS          # t0 = COLOURS
    lw $t0, 4($t0)   #also dont forget second col red,

Draw_bricks_red:
    slt $t4, $t3, $t2           # same, for draw every size 30
    beq $t4, $0, End_bricks_red  # else, done it

        sw $t0, 0($t1)          # at add)dsp t1, we draw colour t0
        addi $t1, $t1, 4        # Go to next place

    addi $t3, $t3, 1            # inc index
    b Draw_bricks_red

End_bricks_red:

    #draw twice col=red
    nop
    
    li $t2 30
    li $t3 0
    la $t1, ADDR_DSPL           # t1=ADDR_DSPL
    lw $t1, 0($t1)  
    addi $t1 $t1 260 #right below

Draw_bricks_red2:
    slt $t4, $t3, $t2           
    beq $t4, $0, End_bricks_red2 

        sw $t0, 0($t1)          # Recall, t0 is colour, t1 is display but this time t0 has same colour as brick1
        addi $t1, $t1, 4        # Go to next palcee

    addi $t3, $t3, 1            # index inc
    b Draw_bricks_red2

End_bricks_red2:

    #same logic
    nop
    
    li $t2 30 #32 units wide since both takes 1 so 30
    li $t3 0 
    la $t1, ADDR_DSPL           # t1=disp_Add
    lw $t1, 0($t1)   #please dont forget my self
    addi $t1 $t1 388 #

    la $t0, COLOURS          # t0= COLOURS
    lw $t0, 8($t0)           #we use third, which is green

Draw_bricks_green:
    slt $t4, $t3, $t2           # 
    beq $t4, $0, End_bricks_green  # elese done it

        sw $t0, 0($t1)          # 
        addi $t1, $t1, 4        # draw next 

    addi $t3, $t3, 1            # inc index
    b Draw_bricks_green

End_bricks_green:
    nop
    
    li $t2 30
    li $t3 0
    la $t1, ADDR_DSPL           
    lw $t1, 0($t1)  
    addi $t1 $t1 516  
    #same colour

Draw_bricks_green2:
    slt $t4, $t3, $t2           
    beq $t4, $0, End_bricks_green2  #

        sw $t0, 0($t1)          # Paint unit with colour
        addi $t1, $t1, 4        # move next pixel

    addi $t3, $t3, 1            # inc index
    b Draw_bricks_green2

End_bricks_green2:
    nop
    #intialize
    li $t2 30
    li $t3 0
    la $t1, ADDR_DSPL           # t1 = ADDR_DSPL
    lw $t1, 0($t1)  #dont forget
    addi $t1 $t1 644 #starts at.

    la $t0, COLOURS          # t0 = COLOURS
    lw $t0, 12($t0)  #fourtg colour blue

Draw_bricks_blue:
    slt $t4, $t3, $t2           #
    beq $t4, $0, End_bricks_blue  # if not, then done it

        sw $t0, 0($t1)          # Paint with colour
        addi $t1, $t1, 4        # Go to next 

    addi $t3, $t3, 1            # inc index till 30
    b Draw_bricks_blue

End_bricks_blue:

#init cok is same as prev
    nop
    
    li $t2 30
    li $t3 0
    la $t1, ADDR_DSPL           # t1 = &ADDR_DSPL
    lw $t1, 0($t1)  
    addi $t1 $t1 772  

Draw_bricks_blue2:
    slt $t4, $t3, $t2           
    beq $t4, $0, End_bricks_blue2  

        sw $t0, 0($t1)          # Paint colour
        addi $t1, $t1, 4        # Go to next unit

    addi $t3, $t3, 1            # inc
    b Draw_bricks_blue2

End_bricks_blue2:

	nop
	
	li $t2 30
	li $t3 0
	la $t1 ADDR_DSPL
	lw $t1,0($t1)
	addi $t1,$t1,900
	la $t0,COLOURS
	lw $t0, 16($t0) #yellow
	

Draw_bricks_yellow:
    slt $t4, $t3, $t2           # 
    beq $t4, $0, End_bricks_yellow # elese done it

        sw $t0, 0($t1)          # 
        
        addi $t1, $t1, 4        # draw next 

    addi $t3, $t3, 1            # inc index
    b Draw_bricks_yellow

End_bricks_yellow:
#init
    nop
    
    li $t2 30
    li $t3 0
    la $t1, ADDR_DSPL           
    lw $t1, 0($t1)  
    addi $t1 ,$t1 ,1028  
    #same colour

Draw_bricks_yellow2:
    slt $t4, $t3, $t2           
    beq $t4, $0, End_bricks_yellow2#

        sw $t0, 0($t1)          # Paint unit with colour
        addi $t1, $t1, 4        # move next pixel

    addi $t3, $t3, 1            # inc index
    b Draw_bricks_yellow2

End_bricks_yellow2:
#finished draw all the bricks


    


#now, we draw paddle.
    nop
    
    li $t2 6 #we load t2=6 size is 6
    li $t3 0 #we laod t3=0
    la $t1, ADDR_DSPL           # t1 = &ADDR_DSPL
    lw $t1, 0($t1)  
    addi $t1 $t1 Init_paddle_offset #we starts to draw at offset,
    
    
    la $t0, COLOURS          # t = OLOURS
    lw $t0, 0($t0) #laod the colour to t0 Wall_paddle_colour
   
    
Draw_paddle:
#t2=6 from prev 
#t3=0 from prev 

    slt $t4, $t3, $t2           # i <  =8 ie)t4=1 iff t3<t2, otherwise t4=0
    beq $t4, $0, End_paddle  # if t4=0, branch to End_paddle, done it

        sw $t0, 0($t1)          # Paint unit with colour t0 has colour address, t1 has display address
        addi $t1, $t1, 4        # Go to next unit ie)t1++, which has t1 display address, which is 4 (next pixel) 

    addi $t3, $t3, 1            # i = i + 1 #t3 consider as index
    b Draw_paddle #typical loop

End_paddle:

    #now draw ball with yellow
    nop
    
    li $t2 1 #load imidiately t2=1 in this loop size1 
    li $t3 0 #t3=0 may use as index
    la $t1, ADDR_DSPL           # t1 = &ADDR_DSPL
    lw $t1, 0($t1)   #since t1 is address it to addr_dspl, we load word it
    addi $t1 $t1 Init_ball_offset #add b
    
    la $t0, COLOURS          # t0= COLOURS
    lw $t0, 24($t0) #brown ball color
    
Draw_ball: #have a issure for colourk i ned to debug about it

    slt $t4, $t3, $t2           # size is 1
    beq $t4, 0, End_Draw_ball  # 

        sw $t0, 0($t1)          # 
        addi $t1, $t1, 4        # 

    addi $t3, $t3, 1            # inc idex till 1
    b Draw_ball

End_Draw_ball:

    nop


#END painting. every time reset, redraw it






#now we consider infinite loop
game_loop:


###################

##################

    #this will consider as infinite loop, we put keyboard here,
    
    #t7 has data of keyboard
    lw $t8, ADDR_KBRD #t8 holds base address of keyboard
    lw $t7, 0($t8) #t7 holds data of ADDR_KBRD address
    
    # 1a. Check if key has been pressed
    
    beq $t7, 1,Keyboard_pressed # if $t7 = 1, then the button is pressed and go to True label
   
    b Not_pressed
    
    
    #if keyboard input was pressed
    # 1b. Check which key has been pressed
    Keyboard_pressed:
    	lw $t7,4($t8) #load keyboard next word, #t8 is addr_keyboard since 0(t8) is 1, 
    	#4(t8) has whether A,or D, or any keyboard pressed
    	
    	
    	beq $t7, 0x61, A_pressed #0x61 is A in hexa ie)if(t7(keyboard_address) == A): call fcn A_pressed (kinda, not really we label it)
    	
    	beq $t7, 0x64, D_pressed
    	
    	beq $t7, 0x0A, Enter_pressed #enter pressed
    	#othersiwise:
    	#A and D was not pressed:
    	
    	li $v0, 10                      # Quit gracefully
	syscall
    	
    	
    	D_pressed: #D_pressed()
    	li $a0 4 #will be used for a0=paddle_location to move right 
    	jal Move_paddle #call Move_paddle(a0>0,a0=4)
    	#by ra, we back to here
    	j Not_pressed #otherwise/after branch to Not_presse
    	
    	A_pressed:  #A_pressed()
    	
    	li $a0 -4 #will be used for Move_paddle(ao=-4) st a0=location of paddle and check for if a0<0, then move left
    	jal Move_paddle
    	
    	
    	
    
    Not_pressed:
    
    #nothing will be happende
    #No valid key pressed
    
    
    
    # 2a. Check for collisions
    #check gameover
    lw $t8, Ball_location #t8  has a address of Ball_location
    bgt $t8, Paddle_leftmost,Draw_gameover # if ball position is on the last row, game over.ie) if(Ball_loc>paddle_leftmost)=> game_over
   	
    
    #this is eaiser since any location that ball is hitted ground is <=> Ball_location hitted >leftmost, 
    #recall:bgt= brach to given if its greater than
    b Check_collisions #othersiwise we branch to Check_collisions
    
    #we label to here iff Ball_location is greater than Paddle_leftmost. ends it, hitted the ground
    End_game:
    	li $v0, 10                      # Quit gracefully 
	syscall
    
    
    Check_collisions: #fcn for Check_collisions()
    lw $t8, Ball_location #let t8=Ball_location
    addi $t7, $t8, -128 # Check top of ball_location
    
    lw $t7, 0($t7) # load/get colour  of the pixel top of ball
    
    beq $t7, 0x00000000, Nothing_on_balltop # if top  of ball is black, we label to Nothing on balltop
    
    #otherwise, we check: does topball_col=WallPaddle_colour? for bounce it
    beq $t7, WallandPaddle_colour, Update_y_velocity # if top wall is light pink, bounce on wall.
     #for paddle bounce
    	# since not light pink its bricks, we need function for break bricks
    	####### TODO #######
    	
    	lw $t8, Ball_location #again, first we get data of Ball_location
    	addi $a0, $t8, -128		#load brick position, which is top of ball
    	jal Get_brick_loc		#to break it, we need to get coordinate of Get_brick_loc, so call Get_brick_loc
    	
    	add $a1, $v0, $zero		# load a1 with the return value
    	#recall:v0 is return value from Get_brick_loc, and we put v0(which is brick start coordiate) to a1
    	
    	
    	jal Delete_brick #now, we call Delete_brick(a1)
    	
    	Update_y_velocity: #fcn for Update_y_veolocity 
    	#t5=y_velocity by la t6,
    	
    
    	la $t6 Ball_velocity 		
   	lw $t5, 4($t6) 			# t5 holds y velocity recall: 0(t6)=x_vel, 4(t6)=y_vel
   	sub $t5, $zero, $t5		# by sub we get negative of t6 
   	sw $t5, 4($t6)			# we save data(which is converted to negative,) on 4(t6)(y_vel)
   	j Nothing_on_ballbelow		# if ball bounces, then no obstacles either up or down
    		
    
    Nothing_on_balltop:
    #if nothing on balltop <=> its black, so keep the velocity,
   
    #this sector is for Chefk below of ball for given ball location
    lw $t8, Ball_location #again, we use t8=ball_location
    addi $t7, $t8, 128 # check below of given ball loc
    lw $t7, 0($t7) # load /get color of the pixel bottom of ball
    beq $t7, 0x00000000, Nothing_on_ballbelow # if bottom of ball is black, nothing happens
    
    #right of ball is not black
    #check if its a wall
    beq $t7,WallandPaddle_colour, Update_y_velocity # if its light_pink, bounce on wall.
    	# oterhsiwe,its bricks ,/make function for breaking block for bottom of ball
    	####### TODO #######
    	
    	lw $t8 , Ball_location 		#get the data of Ball_locaion
    	addi $a0, $t8, 128		#load brick position into a0
    	jal Get_brick_loc		#call the fcn of Get_brick_loc
    	
    	add $a1, $v0, $zero		# load a1 with the return value
    	#again, recall v0 is reuturn value from Get_brick_loc(ball_location),  we put v0 to a0, 
    	#will be used for Delete_brick(a0=Brick_loc to break)
    	jal Delete_brick #call the fcn Delete_brick(Brick_loc this case , its bottom of ball)
    	
    
    Nothing_on_ballbelow: 
    #do nothing
    
    
    #this fcn is for <-left and right-> collision
    #now, this is for Ball_left_collsion:
    lw $t8, Ball_location
    addi $t7, $t8, -4 # check left of ball
    
    lw $t7, 0($t7) # load/get  data/color of the pixel left of ball gi en loc_ball
     
    beq $t7, 0x00000000, Nothing_on_ballleft # if left of ball is black, nothing happens, keep the ball_vel(move)
    #otherwise
    #if left of ball is not black
    #check if its a wall
    beq $t7,WallandPaddle_colour, Update_x_velocity # if its paddle/wall_Colour, bounce on wall.
    	# otherwise its bricks ,, need to have function for breaking block given ball_left

    	
    	lw $t8,Ball_location
    	addi $a0, $t8, -4		#load brick position into a0 a0 = Balll_location -4, whichih is left
    	jal Get_brick_loc		#recall: Get_brick_loc() which will give you return value v0
    	#v0 has location of brick that left of ball for this case.
    	add $a1, $v0, $zero		# load a1 which retrun value v0=loc of brick which ball left
    	jal Delete_brick  		#call Delete_brick(a1=v0) friednly, v0 cannot go into Delet_brick directyl,
    	#since assembly is use vi for return values, and ai as argument.
    	
    	
    	Update_x_velocity: #fcn for Update_x_velocity() for bounce
    	
    	la $t6 Ball_velocity #since its address, we address the Ball_velocity
   	lw $t5, 0($t6) 			# t5 holds x velocity st : t5= Ball_velocity
   	sub $t5, $zero, $t5		# get negative of t6 #get inverse Ball_velocity
   	sw $t5, 0($t6)			# save negative x velocity as new velocity
   	j Nothing_on_ballright		# if ball bounces, then no obstacles either left or right
   	#Nothing on ballright will be created in next,
    	
    
    Nothing_on_ballleft:
    #nothign on ballleft,
    
    
    #for check right of ball_collsion
    lw $t8, Ball_location
    addi $t7, $t8, 4 # check right of ball t7=right of ball
    lw $t7, 0($t7) # load/get data/color of the pixel right of ball
    beq $t7, 0x00000000, Nothing_on_ballright # if right of ball is black, keeps the ball move
    
    #right of ball is not black
    #check if its a wall
    beq $t7, WallandPaddle_colour, Update_x_velocity # if its Wallandpaddle_colour, bounce on wall.
    	# if its not, its bricks, make function for breaking block for  located on ballright 
    	####### TODO #######
    	#to break brick that located on ballright
    	
    	lw $t8, Ball_location
    	addi $a0, $t8, 4		#load brick position into a0 which has a0=ball right loc
    	jal Get_brick_loc 		#get bricks loc that on ball right
    	
    	add $a1, $v0, $zero		# a1=location of btick that is on  ball right
    	jal Delete_brick
    	
    
    Nothing_on_ballright: 
    #nothing happens
    
    
    
    #Move ball.
    #for update velocity of ball:
    
    la $t8, Ball_velocity
    lw $a0 0($t8) 		# load/get data of  X velocity
    lw $a1 4($t8) 		# Load/get data of Y velocity
    
    jal Move_ball		#call fcn Move_ball(a0,a1)
	#ra of Move_ball=577
    #all it does is just move the ball given vel,
    
    
    
    # 4. Sleep
    
    	li $v0, 32
	li $a0, 100
	syscall
    
    #5. Go back to 1
    b game_loop
    
    
 ##Game_loop forever, 
#function for loops

    
Move_paddle: 
    #a0 contains paddle velocity
    
    la $t7, Paddle_location #address of paddle_loc
    lw $t7, 0($t7) #get the data of it, basically t7=paddle_loc since no 4()
    
    blt $a0, $zero, Move_paddle_left  #if $a0=keyboard address is less than 0, aka if paddle moving left since we did a0-4,
    #branch if less than,=blt 
    
    
    
    #otherwise move to right: st a0+4 from keyboard_pressed D
    # paddle is moving right: 
    li $t6, Paddle_rightmost 
    beq $t7, $t6, Done_move_paddle #since t7 has padde_loc= Paddle_rightmost, then Done move paddle,
    #otherwise:
    #paddle position is not right bound, there is space to move right,
    	la $t0,COLOURS
    	lw $t0, 0($t0) 	#load paddle colour to $t0
    	
    	sw $t0, 24($t7) 	# Paint the right of paddle to paddle_colour size is 5, so 24 is right of paddle
    	
    	la $t0, COLOURS
    	lw $t0, 28($t0) 	#load black to $t0
    	#basicaly t0=paddle_col;
    	
    	
    	sw $t0, 0($t7)		# Paint the original paddle position black
    	
    	addi $t7, $t7, 4 #update position of paddle
    	sw $t7 Paddle_location
    	
    	j Done_move_paddle
    #since we use branch it, for left, create label:
    Move_paddle_left: 
    	li $t6, Paddle_leftmost #load PADDLE_LEFT_BOUND to li
    	beq $t7, $t6, Done_move_paddle #if paddle position is left bound, end. same logic as right,
    	
    	#paddle position is not left bound, there is room to move
    	la $t0, COLOURS
    	lw $t0, 0($t0) 	#load paddle colur to $t0
    	
    	sw $t0, -4($t7) 	# Paint the left of paddle to paddle_colour
    	
    	la $t0, COLOURS
    	lw $t0, 28($t0) 	#t0=black
    	
    	sw $t0, 20($t7)		# Paint the right of paddle to black
    	
    	addi $t7, $t7, -4 #update position of paddle
    	sw $t7 Paddle_location
    	
    Done_move_paddle:
    jr $ra #line 404
    
    
    Move_ball:
    #
    # update new position ####
    #a0=x vel = 0(t8)
    #a1=y vel = 4(t8)
    #for moving ball in x vel
    lw $t8 Ball_location 	# t8 contains the position of ball saved to memory

    blt $a0, $zero, Move_x_negative # if $a0 < 0, then go move x negative branch
    	#othersiwe, its postiive,
    	# positive branch
    	addi $t8, $t8, 4 	# increase new ball location in x axis by 1.
    	#after, check 
    	j End_move_x_negative
    	
    Move_x_negative:
    	addi $t8, $t8, -4	# increase new ball location in x axis by -1
    	
    	
    End_move_x_negative:
    #nothing happen
    
    #for Moving ball in y vel
    
    blt $a1, $zero, Move_y_negative
    	# positive branch 
    	addi $t8, $t8, -128	# increase new ball location in y axis by 1
    	
    	j End_move_y_negative
    	
    Move_y_negative:
    	addi $t8, $t8, 128	# increase new ball location in y axis by -1
    
    End_move_y_negative:
    #nothing happen
    
    #now we have all the new location to draw ball, we need to delete it original point and draw it
    # delete original ball .
    
    
    	
    	la $t1,COLOURS          	# temp =COLOURS
    	lw $t1, 28($t1)			# load BLACK into t1
    
    	lw $t3, Ball_location		# load old ball position into t3			
    	
    	sw $t1, 0($t3)			# paint black into original ball loc
    
    # redraw the ball in new location
    
    	la $t1,COLOURS          	# t1,=COLOURS
    	lw $t1, 24($t1)			# load Bropwn into t1 which is ball'scol
    	
    	sw $t1, 0($t8)			# recall:t8 has new loc of ball, save/store ball clolur(t1)  on t8
    
    # save new position of ball into memory
    
    	sw $t8 Ball_location
    
    	jr $ra #back to line 577
    	
Get_brick_loc:
#Get_brick_loc() that gets the coordinates of bricks for deleting the bricks that hiiten by ball
	# a0 has coordinates of brick
	
	
	bgt $a0, 0x10008384, Bottom_level	#brick is in bottom layer of bricks 
    	
    	    # not in bottom level, check middle level
    	    bgt $a0, 0x10008284, Middle_level2 #recall a0 has coordinates of brick
    	    bgt $a0, 0x10008184, Middle_level1
    	    	
    	    	#not in middle level, i,e, has to be top level: 0x10008084
    	    	sub $t8, $a0, 0x10008000
    	    	li $t5 128
    	    	div $t8, $t5
    	    	mfhi $t7
    	    	
    	    	bgt $t7, 124, Return_sixth_top #check 24 plus first for yellow block
    	    	bgt $t7, 100, Return_fifth_top
    	    	bgt $t7, 76, Return_fourth_top
    	    	bgt $t7, 52, Return_third_top
    	    	bgt $t7, 28, Return_second_top #since first is pink
    	    	
    	    	# first out of the row
    	    	li $t6 0x10008084
    	    	addi $v0, $t6, 0
    	    	jr $ra
    	    	
    	    	Return_sixth_top:
    	    	li $t6 0x10008084
    	    	addi $v0, $t6, 120 #check
    	    	jr $ra
    	    	
    	    	Return_fifth_top:
    	    	li $t6 0x10008084
    	    	addi $v0, $t6, 96
    	    	jr $ra
    	    	
    	    	Return_fourth_top:
    	    	li $t6 0x10008084
    	    	addi $v0, $t6, 72
    	    	jr $ra
    	    	
    	    	Return_third_top:
    	    	li $t6 0x10008084
    	    	addi $v0, $t6,48
    	    	jr $ra
    	    	Return_second_top:
    	    	li $t6, 0x10008084
    	    	addi $v0, $t6, 24
    	    	jr $ra
    	    	
    	    	
    	    	
    	    	
    	    Middle_level1:
    	        sub $t8, $a0, 0x10008000
    	    	li $t5 128
    	    	div $t8, $t5
    	    	mfhi $t7
    	    	bgt $t7,124,Return_sixth_middle1
    	    	bgt $t7, 100, Return_fifth_middle1
    	    	bgt $t7, 76, Return_fourth_middle1
    	    	bgt $t7, 52, Return_third_middle1
    	    	bgt $t7, 28, Return_second_middle1
    	    	
    	    	# first out of the row
    	    	li $t6 0x10008184
    	    	addi $v0, $t6, 0
    	    	jr $ra
    	    	Return_sixth_middle1:
    	    	li $t6, 0x10008184
    	    	addi $v0,$t6, 120 #check
    	    	jr $ra
    	    	Return_fifth_middle1:
    	    	li $t6 0x10008184
    	    	addi $v0, $t6, 100
    	    	jr $ra
    	    	
    	    	Return_fourth_middle1:
    	    	li $t6 0x10008184
    	    	addi $v0, $t6, 72
    	    	jr $ra
    	    	
    	    	Return_third_middle1:
    	    	li $t6 0x10008184
    	    	addi $v0, $t6, 48
    	    	jr $ra
    	    	
    	    	Return_second_middle1:
    	    	li $t6 0x10008184
    	    	addi $v0, $t6, 24
    	    	jr $ra
    	    	
    	    Middle_level2:
    	        sub $t8, $a0, 0x10008000
    	    	li $t5 128
    	    	div $t8, $t5
    	    	mfhi $t7
    	    	bgt $t7,124,Return_sixth_middle2
    	    	bgt $t7, 100, Return_fifth_middle2
    	    	bgt $t7, 76, Return_fourth_middle2
    	    	bgt $t7, 52, Return_third_middle2
    	    	bgt $t7, 28, Return_second_middle2
    	    	
    	    	# first out of the row
    	    	li $t6 0x10008284
    	    	addi $v0, $t6, 0
    	    	jr $ra
    	    	Return_sixth_middle2:
    	    	li $t6, 0x10008284
    	    	addi $v0,$t6, 120 #check
    	    	jr $ra
    	    	Return_fifth_middle2:
    	    	li $t6 0x10008284
    	    	addi $v0, $t6, 100
    	    	jr $ra
    	    	
    	    	Return_fourth_middle2:
    	    	li $t6 0x10008284
    	    	addi $v0, $t6, 72
    	    	jr $ra
    	    	
    	    	Return_third_middle2:
    	    	li $t6 0x10008284
    	    	addi $v0, $t6, 48
    	    	jr $ra
    	    	
    	    	Return_second_middle2:
    	    	li $t6 0x10008284
    	    	addi $v0, $t6, 24
    	    	jr $ra
 
    	
    	Bottom_level:
    	    sub $t8, $a0, 0x10008384 #t8=a0+ox
	    li $t5 128
    	    div $t8, $t5
    	    mfhi $t7 #getting the remainder from t8/t5, which is 
    	    bgt $t7, 124, Return_sixth_bottom
    	    bgt $t7, 100, Return_fifth_bottom
    	    bgt $t7, 76, Return_fourth_bottom
    	    bgt $t7, 52, Return_third_bottom
    	    bgt $t7, 28, Return_second_bottom
    	    	
    	    # first out of the row
    	    li $t6 0x10008384
    	    addi $v0, $t6, 0
    	    jr $ra
    	    Return_sixth_bottom:
    	    li $t6, 0x10008384
    	    addi $v0, $t6, 120
    	    jr $ra
    	    Return_fifth_bottom:
    	    li $t6 0x10008384
    	    addi $v0, $t6, 96
    	    jr $ra
    	    	
    	    Return_fourth_bottom:
    	    li $t6 0x10008384
    	    addi $v0, $t6, 72
    	    jr $ra
    	    
    	    Return_third_bottom:
    	    li $t6 0x10008384
    	    addi $v0, $t6, 48
    	    jr $ra
    	    	
    	    Return_second_bottom:
    	    li $t6 0x10008384
    	    addi $v0, $t6, 24
    	    jr $ra
    
Delete_brick:
	li $t3, 0
	li $t2, 6
	li $t0 0x000000 # load black into $t0
	
	Start_delete:
	
    	slt $t4, $t3, $t2           	# t3=i <t2 # of unit t4=1 otherwise 0
    	beq $t4, 0, Done_delete  	# otehrwise done it

        sw $t0, 0($a1)          	# for given paint unit a1, paint it to t0=black
        sw $t0, 128($a1)		# paint black unit below,
        addi $a1, $a1, 4        	# update/go to next unit

    	addi $t3, $t3, 1            	# i = i + 1
    	b Start_delete			
    	
    	Done_delete: 
    	jr $ra #returns the value of it
    	
Draw_gameover:
Draw_End:  #draw start screen breakout

	    li $t0, Base_address       # $t0 has base address
            la $t1, End_page        # $t1 has Start_page[]
            li $t2, 0            # $t2 as index
            li $t3, Num_units        # $t3 stores total units whihch is 4096

Loop_Endpage: 
	    bge $t2, $t3, Exit_Endpage#if finihsed draw Start_page, then wait for enter
            sll $t4, $t2, 2          # calculate offsetst: times 2, since  2^2,...4 
            add $t5, $t1, $t4        # $t5 stores address of color for current unit
            lw $t5, 0($t5)            # $t5 stores color of current unit
            add $t4, $t4, $t0        # $t4 stores address of current unit
            sw $t5, 0($t4)            # paint the given unit to black
            addi $t2, $t2, 1        # index
            j Loop_Endpage

Exit_Endpage:

j Wait_for_enter
